var obj = {
    p2:'aaa',
    2:'aaa',
    1:'aaa',
    p1:'aaa'
}

for(let key in obj ){
    console.log(key)
}
// 1 2 p2 p1

// 5. 总结
// 数字属性（正整数）按升序排列。

// 字符串属性按添加到对象的顺序排列。

// Symbol 属性不会被 for...in 遍历。






// 为什么要这么设计
// **性能优化**
// - **数字属性的特殊处理**：
//   - 数字属性（如 `1`、`2`）通常用于数组或类数组对象。
//   - 对这些属性按升序排列可以提高遍历效率，尤其是在处理数组时。
//   - 引擎可以将数字属性存储在连续的内存空间中，类似于数组，从而优化访问速度。
// - **字符串属性的哈希表**：
//   - 字符串属性（如 `"p1"`、`"p2"`）通常存储在哈希表中，按添加顺序遍历是哈希表的自然行为。
//   - 保持添加顺序可以避免额外的排序开销。

// JavaScript 对象属性遍历顺序的设计（数字属性按升序排列，字符串属性按添加顺序排列）是由语言的历史、性能和规范共同决定的。以下是底层设计的原因和背景：

// ---










// ### 1. **历史原因**
// - **JavaScript 的诞生**：
//   - JavaScript 最初是由 Brendan Eich 在 1995 年用 10 天时间设计的，语言的设计目标是为浏览器提供简单的脚本功能。
//   - 早期的 JavaScript 并没有严格定义对象属性的遍历顺序，不同浏览器的实现可能不同。
// - **兼容性**：
//   - 随着 JavaScript 的广泛应用，许多代码依赖于对象属性的遍历顺序（即使这种行为未被明确规范）。
//   - 为了保持向后兼容性，ECMAScript 规范在后续版本中明确了遍历顺序的规则。

// ---

// ### 2. **性能优化**
// - **数字属性的特殊处理**：
//   - 数字属性（如 `1`、`2`）通常用于数组或类数组对象。
//   - 对这些属性按升序排列可以提高遍历效率，尤其是在处理数组时。
//   - 引擎可以将数字属性存储在连续的内存空间中，类似于数组，从而优化访问速度。
// - **字符串属性的哈希表**：
//   - 字符串属性（如 `"p1"`、`"p2"`）通常存储在哈希表中，按添加顺序遍历是哈希表的自然行为。
//   - 保持添加顺序可以避免额外的排序开销。

// ---

// ### 3. **规范定义**
// - **ECMAScript 规范**：
//   - 从 **ECMAScript 2015 (ES6)** 开始，规范明确定义了对象属性的遍历顺序：
//     1. **数字属性**（正整数）按升序排列。
//     2. **字符串属性**按添加到对象的顺序排列。
//     3. **Symbol 属性**按添加到对象的顺序排列。
//   - 这一规范确保了不同 JavaScript 引擎的行为一致性。
// - **一致性**：
//   - 明确的遍历顺序规则使开发者能够编写可预测的代码，同时避免了不同引擎之间的行为差异。

// ---

// ### 4. **实际应用场景**
// - **数组和类数组对象**：
//   - 数组的本质是对象，其索引是数字属性。按升序遍历数字属性可以保证数组元素的顺序。
//   - 例如：
//     ```javascript
//     let arr = [10, 20];
//     arr["foo"] = "bar";
//     for (let key in arr) {
//       console.log(key); // 输出顺序：0 1 foo
//     }
//     ```
// - **普通对象**：
//   - 普通对象的属性通常是字符串，按添加顺序遍历符合开发者的直觉。
//   - 例如：
//     ```javascript
//     let obj = { a: 1, b: 2, 2: "two", 1: "one" };
//     for (let key in obj) {
//       console.log(key); // 输出顺序：1 2 a b
//     }
//     ```

// ---

// ### 5. **设计哲学**
// - **灵活性**：
//   - JavaScript 是一种动态语言，对象的设计需要兼顾灵活性和性能。
//   - 数字属性的特殊处理和字符串属性的自然顺序是一种折中方案。
// - **开发者友好**：
//   - 明确的遍历顺序规则使开发者更容易理解和预测代码的行为。
//   - 例如，开发者可以依赖对象属性的顺序来实现特定的逻辑。

// ---

// ### 6. **与其他语言的对比**
// - **Python**：
//   - 在 Python 3.7 之前，字典的遍历顺序是未定义的；从 Python 3.7 开始，字典的遍历顺序与插入顺序一致。
// - **Java**：
//   - Java 的 `HashMap` 不保证遍历顺序，但 `LinkedHashMap` 保留了插入顺序。
// - **C++**：
//   - C++ 的 `std::map` 按键的顺序遍历，而 `std::unordered_map` 不保证顺序。

// JavaScript 的设计在灵活性和性能之间找到了平衡，同时通过规范确保了行为的一致性。

// ---

// ### 总结
// JavaScript 对象属性遍历顺序的设计是出于以下考虑：
// 1. **历史兼容性**：保持与早期代码的兼容性。
// 2. **性能优化**：数字属性的升序排列和字符串属性的自然顺序可以提高性能。
// 3. **规范一致性**：明确的规则确保了不同引擎的行为一致性。
// 4. **开发者友好**：使开发者能够编写可预测的代码。

// 这种设计既满足了语言的历史需求，又兼顾了现代 JavaScript 的性能和可维护性。